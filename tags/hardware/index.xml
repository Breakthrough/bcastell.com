<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Hardware on Brandon Castellano</title>
    <link>https://www.bcastell.com/tags/hardware/index.xml</link>
    <description>Recent content in Hardware on Brandon Castellano</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Copyright &amp;copy; 2017 Brandon Castellano.  All rights reserved.</copyright>
    <atom:link href="https://www.bcastell.com/tags/hardware/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>How does word length affect the performance and operation of a CPU?</title>
      <link>https://www.bcastell.com/posts/word-length-vs-performance/</link>
      <pubDate>Wed, 17 Oct 2012 00:00:00 +0000</pubDate>
      
      <guid>https://www.bcastell.com/posts/word-length-vs-performance/</guid>
      <description>&lt;p&gt;About a year ago, I came across a question on Super User titled “How much faster is a 64-bit CPU than a 32-bit CPU?”, which was promptly closed and deleted since it’s a very open ended question. However, the author (a software developer) referred to benchmarks regarding system performance in 32-bit versus 64-bit. The purpose of this blog post is to investigate how the performance of a computer is affected, as a function of the word length.&lt;/p&gt;

&lt;div style=&#34;padding:0.75em;margin:1em 4em;&#34;&gt;&lt;center&gt;
&lt;img width=&#34;100%&#34; src=&#34;https://www.bcastell.com/img/wordlen2.jpg&#34; alt=&#34;Two Microcontrollers (8-bit Atmel), A Raspberry Pi (32-bit ARM), and my laptop (64-bit Intel)&#34;/&gt;
&lt;/center&gt;&lt;/div&gt;

&lt;p&gt;8-bit, 32-bit, and 64-bit all refer to the &lt;a href=&#34;http://en.wikipedia.org/wiki/Word_%28computer_architecture%29&#34;&gt;word length&lt;/a&gt; of the processor, which can be thought of as the “fundamental data type”. Often, this is the number of bits transferred to/from the RAM of the system, and the width of pointers (although nothing stops you from using software to access more RAM then what a single pointer can access). A word length can be any number of bits, but is usually a power of two.&lt;/p&gt;

&lt;p&gt;Assuming a constant clock speed (as well as everything else in the architecture being constant), and assuming memory reads/writes are the same speed (we assume 1 clock cycle here, but this is far from the case in real life), there is no direct speed advantage from a 32-bit to a 64-bit processor, except when using higher-precision values, or lots of memory reads/writes are required. For example, if I need to add two 64-bit numbers, I can do it in a single clock cycle on a 64-bit machine (three if you count fetching the numbers from RAM):&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #ffffff&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;     ADDA [NUM1], [NUM2]
     STAA [RESULT]
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;However, on a 32-bit machine, I need to do this in many clock cycles, since I first need to add the lower 32-bits, and then compensate for overflow, then add the upper 64-bits:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #ffffff&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;     ADDA [NUM1_LOWER], [NUM2_LOWER]
     STAA [RESULT_LOWER]
     CLRA          &lt;span style=&#34;color: #008000&#34;&gt;; I&amp;#39;m assuming the condition flags are not modified by this.&lt;/span&gt;
     BRNO CMPS     &lt;span style=&#34;color: #008000&#34;&gt;; Branch to CMPS if there was no overflow.&lt;/span&gt;
     ADDA #1       &lt;span style=&#34;color: #008000&#34;&gt;; If there was overflow, compensate the value of A.&lt;/span&gt;
CMPS ADDA [NUM1_UPPER], [NUM2_UPPER]
     STAA [RESULT_UPPER]
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Going through my made-up assembly syntax, you can easily see how higher-precision operations can take an exponentially longer time on a lower word length machine. This is the real key to 64-bit and 128-bit processors: they allow us to handle larger numbers of bits in a single operation.&lt;/p&gt;

&lt;p&gt;Likewise, if we had to make a copy of some data in memory, assuming everything else is constant, we could copy twice as many bits per cycle on a 64-bit versus 32-bit machine. This is why 64-bit versions of many image/video editing programs outperform their 32-bit counterparts.&lt;/p&gt;

&lt;p&gt;Back to high-precision operations, even if you add the ability to a 32-bit processor to add two 64-bit numbers in a single clock cycle, &lt;em&gt;you still need more than one clock cycle&lt;/em&gt; to fetch those numbers from RAM, since the word length (again) is often the fundamental size of memory operations. So, let’s assume we have two 64-bit registers (A64 and B64), and have an operation called ADDAB64 which adds A and B, and stores it in A:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #ffffff&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;     LDDA64 [NUM1]   &lt;span style=&#34;color: #008000&#34;&gt;; Takes 2 clock cycles, since this number is fetched 32-bits at a time&lt;/span&gt;
     LDAB64 [NUM2]   &lt;span style=&#34;color: #008000&#34;&gt;; Again, two more clock cycles.&lt;/span&gt;
     ADDAB64         &lt;span style=&#34;color: #008000&#34;&gt;; This only takes 1.&lt;/span&gt;
     STAA64 [RESULT] &lt;span style=&#34;color: #008000&#34;&gt;; However, this takes two again, since we need to store a 64-bit result 32-bits at a time.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;As you can see, even a hardware implementation of a 64-bit addition under a 32-bit processor still takes 7 clock cycles at minimum (and this assumes all memory reads/writes take a single clock cycle). Where I’m going with this has performance implications specifically with pointers.&lt;/p&gt;

&lt;p&gt;On a 32-bit machine, pointers can address ~4GB of RAM, where they can address over 16.7 million TB on a 64-bit machine. If you needed to address past 4GB on 32-bit, you would need to compensate for that kind of like how we added a 64-bit number on our 32-bit machine above. You would have many extra clock cycles dedicated to fetching and parsing those wider numbers, whereas those operations go much quicker on a processor that can handle it all in one word.&lt;/p&gt;

&lt;p&gt;Also, while increasing the number of bits in an &lt;a href=&#34;http://en.wikipedia.org/wiki/Arithmetic_logic_unit&#34;&gt;arithmetic and logic unit (ALU)&lt;/a&gt; will increase propagation delays for most operations, this delay is very manageable in today’s processors (or else we couldn’t keep the same clock speeds as our 32-bit processor variants), and is not much use when discussing digital synchronous circuits (since everything is clocked together, if the propagation delay was too long, the processor would just crash – which is also why there are limits to overclocking).&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;The bottom line&lt;/strong&gt;: larger word lengths means we can process more data faster in the processor, which is greatly needed as we advance computing technology. This is why so many instruction set extensions (MMX, SSE, etc…) have been created: to process larger amounts of data in less amount of time.&lt;/p&gt;

&lt;p&gt;A larger word length in a processor does not directly increase the performance of the system, but when dealing with larger (or higher precision) values is required, exponential performance gains can be realized. While the average consumer may not notice these increases, they are greatly appreciated in the fields of numeric computing, scientific analysis, video encoding, and encryption/compression.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Post moved to new location on September 28, 2017.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Biopsy Bot</title>
      <link>https://www.bcastell.com/projects/BiopsyBot/</link>
      <pubDate>Mon, 05 Dec 2011 00:00:00 +0000</pubDate>
      
      <guid>https://www.bcastell.com/projects/BiopsyBot/</guid>
      <description>

&lt;p&gt;&lt;img src=&#34;https://www.bcastell.com/img/projects/biopsybot/header.jpg&#34; alt=&#34;Biopsy Bot in Action&#34; width=&#34;100%&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;general-overview&#34;&gt;General Overview&lt;/h2&gt;

&lt;p&gt;A remote-control robot capable of gathering a biological sample in unknown areas, Biopsy Bot was developed as a final project for the 4th year Mechatronic System Design course offered at UWO. The purpose of the project was to develop a robot capable of remotely navigating (with the aid of an on-board wireless camera) an area of unknown, rocky terrain, in order to gather and return a biological sample from a mysterious blob (made of Jello). Furthermore, the robot is required to overcome several obstacles, while having a limited size.&lt;/p&gt;

&lt;p&gt;Below is a short video showing off some of the construction, and the results from the final competition (the first run starts at 0:45 in):&lt;/p&gt;

&lt;p&gt;&lt;center&gt;&lt;br /&gt;
&lt;iframe src=&#34;https://www.youtube.com/embed/8z4u3RBaM9Q&#34; width=&#34;610&#34; height=&#34;343&#34; frameborder=&#34;0&#34;&gt;
&lt;/iframe&gt;
&lt;/center&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;technical-specifications&#34;&gt;Technical Specifications&lt;/h2&gt;

&lt;h3 id=&#34;body-and-drivetrain&#34;&gt;Body and Drivetrain&lt;/h3&gt;

&lt;p&gt;The majority of Biopsy Bot is constructed from plexi-glass, with an aluminum-based body extension at the front. This was done to extend the length of the tracks while providing an adjustable angle for Biopsy Bot to approach the tallest obstacle with. The aluminum body extension also holds the sample gathering arm and associated motors.&lt;/p&gt;

&lt;p&gt;There are four drive motors in total on Biopsy Bot (two per tread), and all are geared DC motors. The maximum current draw is 1.24A at 12V, again over the tallest obstacle. The treads were made using a VEX Robotics’ Tank Tread Kit, with some all-purpose silicone to improve the tread grip. There is a separate 9V power supply dedicated to the communications &amp;amp; control equipment, to avoid feedback and voltage sags from the motors’ power rail.&lt;/p&gt;

&lt;h3 id=&#34;communications-and-control&#34;&gt;Communications and Control&lt;/h3&gt;

&lt;p&gt;In order to use Wi-Fi as the wireless communication method, a Roving Networks RN-XV was attached to a (required) PIC24HJ64GP502 via UART. The RN-XV’s job is to forward any received TCP/UDP packets as ASCII characters to the PIC microcontroller. For this reason, a token-based communication method was used, where the microcontroller parsed the incoming data like a finite state machine, applying the appropriate signals to the relevant motors/lights on Biopsy Bot. In a loss-of-communication event, the robot is designed to stop moving within 200 milliseconds.&lt;/p&gt;

&lt;p&gt;On the computer side, I wrote a fairly simple UDP application using the &lt;a href=&#34;http://www.libsdl.org/&#34;&gt;SDL&lt;/a&gt; and &lt;a href=&#34;http://www.libsdl.org/projects/SDL_net/&#34;&gt;SDL_net&lt;/a&gt; libraries. SDL was used to obtain the input from a generic joystick device (a PS3 controller, in this case), parse the relevant analog/digital inputs into control signals, and forward the appropriate control signals to Biopsy Bot.&lt;/p&gt;

&lt;h3 id=&#34;biological-sample-collector-mechanism-design&#34;&gt;Biological Sample Collector Mechanism Design&lt;/h3&gt;

&lt;p&gt;In order to collect a sample of the mysterious blob (Jello), a syringe was attached to the motors in an old scanner head, creating the sample collection mechanism. Using a geared motor and the respective track, one side of the syringe plunger was ground down, and the track was fixed to it. A custom mounting bracket was then created out of plexi-glass, allowing the geared motor to press and retract the syringe.&lt;/p&gt;

&lt;p&gt;Once complete, the entire mechanism was attached to a motor, so it could be raised/lowered by the robot. Part of the project requirements was to automate the sample collection process, so the automatic functionality was integrated into the control software, and could be activated by simply holding a button on the controller for a few seconds:&lt;/p&gt;

&lt;p&gt;&lt;center&gt;&lt;br /&gt;
&lt;iframe src=&#34;https://www.youtube.com/embed/u5LrPZ8Q6iQ&#34; width=&#34;610&#34; height=&#34;343&#34; frameborder=&#34;0&#34;&gt;
&lt;/iframe&gt;
&lt;/center&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;the-team&#34;&gt;The Team&lt;/h2&gt;

&lt;p&gt;This was a group project, with the team involving me (Brandon Castellano), Daren Michener, Ryan Mantha, and Brock Turner. Here’s a picture of us hard at work on the software, in a lab room we probably spent far too much time in together (from left-to-right is Brock, Ryan, and Daren):&lt;/p&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&#34;https://www.bcastell.com/img/projects/biopsybot/team.jpg&#34; alt=&#34;Biopsy Bot in Action&#34; width=&#34;90%&#34; /&gt;&lt;/center&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Overall the project was very successful, achieving all of the requirements set by the task, and was one of the highest ranking competetors in field testing.  Although challenging at times, it was a very fun project to work on, and I had a great time working with the team.  Lastly, thanks again to Darren, Brock, and Ryan, for all their ingenuity, hard work, and dedication in helping make Biopsy Bot.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>