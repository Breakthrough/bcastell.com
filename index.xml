<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Brandon Castellano</title>
    <link>https://www.bcastell.com/</link>
    <description>Recent content on Brandon Castellano</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 28 Sep 2017 12:57:00 -0500</lastBuildDate>
    
	<atom:link href="https://www.bcastell.com/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Triclysm</title>
      <link>https://www.bcastell.com/projects/triclysm/</link>
      <pubDate>Thu, 28 Sep 2017 12:57:00 -0500</pubDate>
      
      <guid>https://www.bcastell.com/projects/triclysm/</guid>
      <description>Triclysm Project Overview See the Triclysm project on Github at the following URL: https://github.com/Triclysm
Triclysm Previewer Triclysm Previewer (link) is a cross-platform application for developing, previewing, and streaming (via Ethernet or Wi-Fi) to a physical LED cube/voxel-based display. Cross-platform, written in C++, using SDL/OpenGL as a back-end, with Lua as the primary scripting language for animations.
In the future, a rewrite is planned, utilizing Python for a majority of the code, and allowing it to be used for animation development as well.</description>
    </item>
    
    <item>
      <title>Scene Detection with Python and OpenCV, Part 2</title>
      <link>https://www.bcastell.com/posts/scene-detection-tutorial-part-2/</link>
      <pubDate>Wed, 06 Sep 2017 01:14:08 +0200</pubDate>
      
      <guid>https://www.bcastell.com/posts/scene-detection-tutorial-part-2/</guid>
      <description>Part 2: Adaptive Threshold Detection This tutorial is currently being migrated from the old location. In the meantime, you can view the cached version of the previous, complete version on The Wayback Machine by clicking here. Thank you for your patience during this time.</description>
    </item>
    
    <item>
      <title>DVR-Scan</title>
      <link>https://www.bcastell.com/projects/dvr-scan/</link>
      <pubDate>Wed, 11 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>https://www.bcastell.com/projects/dvr-scan/</guid>
      <description>DVR-Scan  Overview DVR-Scan is a command-line application for detecting areas in a video that contain motion, automatically extracting each motion segment as a separate file for further viewing or processing. This makes managing a large amount of footage from, for example, security cameras/DVRs, a much more manageable task, as only the areas of interest need to be reviewed after processing with DVR-Scan.
See DVR-Scan on Readthedocs for more information.</description>
    </item>
    
    <item>
      <title>PySceneDetect</title>
      <link>https://www.bcastell.com/projects/pyscenedetect/</link>
      <pubDate>Sun, 08 Jun 2014 00:00:00 +0000</pubDate>
      
      <guid>https://www.bcastell.com/projects/pyscenedetect/</guid>
      <description>PySceneDetect Overview PySceneDetect is a command-line application and a Python library for detecting scene changes in videos, automatically splitting the video into separate clips. Not only is it free and open-source software (FOSS), but there are several detection methods available (see Features), from simple threshold-based fade in/out detection, to advanced content aware fast-cut detection.
Download Click here to download the latest release of PySceneDetect. Note that PySceneDetect is cross-platform, and is supported for Windows, Linux, and OSX.</description>
    </item>
    
    <item>
      <title>Scene Detection with Python and OpenCV, Part 1</title>
      <link>https://www.bcastell.com/posts/scene-detection-tutorial-part-1/</link>
      <pubDate>Sat, 19 Oct 2013 00:00:00 +0000</pubDate>
      
      <guid>https://www.bcastell.com/posts/scene-detection-tutorial-part-1/</guid>
      <description>Part 1: Threshold/Fade-to-Black Detection This tutorial is currently being migrated from the old location. In the meantime, you can view the cached version of the previous, complete version on The Wayback Machine by clicking here. Thank you for your patience during this time.
In the first part of this three-part tutorial, we will write a Python program, using the OpenCV library, to perform threshold-based scene detection, to determine the exact frames where scene transitions (fade ins/outs to/from black in this case) occur.</description>
    </item>
    
    <item>
      <title>How does word length affect the performance and operation of a CPU?</title>
      <link>https://www.bcastell.com/posts/word-length-vs-performance/</link>
      <pubDate>Wed, 17 Oct 2012 00:00:00 +0000</pubDate>
      
      <guid>https://www.bcastell.com/posts/word-length-vs-performance/</guid>
      <description>About a year ago, I came across a question on Super User titled “How much faster is a 64-bit CPU than a 32-bit CPU?”, which was promptly closed and deleted since it’s a very open ended question. However, the author (a software developer) referred to benchmarks regarding system performance in 32-bit versus 64-bit. The purpose of this blog post is to investigate how the performance of a computer is affected, as a function of the word length.</description>
    </item>
    
    <item>
      <title>Fixing the XAnalogTV Screensaver</title>
      <link>https://www.bcastell.com/posts/fixing-xanalogtv/</link>
      <pubDate>Mon, 10 Sep 2012 00:00:00 +0000</pubDate>
      
      <guid>https://www.bcastell.com/posts/fixing-xanalogtv/</guid>
      <description>A few days ago, I discovered the awesome XAnalogTV screensaver included with XScreenSaver. I was very impressed with the visuals, which include a very accurate simulation of a conventional “tube” television implementing the analog NTSC TV standard. There was just one problem – I couldn’t get XAnalogTV to fill my screen:
 In the source code, the virtual &#34;display&#34; is forced to be within 15% of a standard 4:3 display. Any screen which is outside of this 15% range is just clipped, as shown in this image.</description>
    </item>
    
    <item>
      <title>Biopsy Bot</title>
      <link>https://www.bcastell.com/projects/biopsybot/</link>
      <pubDate>Mon, 05 Dec 2011 00:00:00 +0000</pubDate>
      
      <guid>https://www.bcastell.com/projects/biopsybot/</guid>
      <description>General Overview A remote-control robot capable of gathering a biological sample in unknown areas, Biopsy Bot was developed as a final project for the 4th year Mechatronic System Design course offered at UWO. The purpose of the project was to develop a robot capable of remotely navigating (with the aid of an on-board wireless camera) an area of unknown, rocky terrain, in order to gather and return a biological sample from a mysterious blob (made of Jello).</description>
    </item>
    
    <item>
      <title>About</title>
      <link>https://www.bcastell.com/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.bcastell.com/about/</guid>
      <description>Hi there! This is the personal website of Brandon Castellano (sometimes known as Breakthrough). Here, you can find my blog, technical articles, and various projects (software &amp; hardware) I’m working on. As for my background, I hold a B.E.Sc in Electrical Engineering, with the majority of my professional experience in the areas of robotics and real-time control systems. I’m most experienced in C/C++, Rust, and Python. I&#39;m also proficient with Go, Dart, and C#.</description>
    </item>
    
    <item>
      <title>Contact</title>
      <link>https://www.bcastell.com/contact/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.bcastell.com/contact/</guid>
      <description>Social  Github: Breakthrough  Super User: Breakthrough  Stack Overflow: Breakthrough  Wikipedia: bcastell
  Direct For professional inquiries, use the contact form below. You can also contact me through any of my other official accounts/services listed on the About page.
This is especially preferred in regards to any bug reports or feature requests, which should be submitted as an issue on the relevant project&amp;rsquo;s Github Issues page.</description>
    </item>
    
    <item>
      <title>Projects</title>
      <link>https://www.bcastell.com/projects/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.bcastell.com/projects/</guid>
      <description>PySceneDetect &amp;#x1f3a5;  PySceneDetect is a scene/shot detection tool and Python library. It is free and open source software, used in both industry and academia. Example applications include preprocessing video data for training AI models, developing plugins for non-linear video editors, and research analysis of film. PySceneDetect was built to be extensible, and easily integrates into most workflows.
DVR-Scan  
DVR-Scan (www.dvr-scan.com) is a tool that automatically detects motion events in video files (e.</description>
    </item>
    
  </channel>
</rss>